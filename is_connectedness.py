# -*- coding: utf-8 -*-
"""IS Connectedness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZXYb7hgey2CSQTDKsqugxZhaImHQft8L

Comparison for the connectedness

8 Connectedness
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the image
image_path = '/content/Screenshot 2024-09-07 204555.png'  # Replace with your image path
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if image is loaded
if image is None:
    print("Error: Image not found!")
    exit()

# Apply binary thresholding
_, binary_image = cv2.threshold(image, 128, 255, cv2.THRESH_BINARY)

# Find connected components
num_labels, labels = cv2.connectedComponents(binary_image, connectivity=8)

# Generate output image with random colors for each component
output_image = np.zeros((labels.shape[0], labels.shape[1], 3), dtype=np.uint8)
colors = np.random.randint(0, 255, size=(num_labels, 3), dtype=np.uint8)

for i in range(1, num_labels):  # Skip background label (0)
    output_image[labels == i] = colors[i]

# Display the results
titles = ['Original Image', 'Binary Image', 'Connected Components']
images = [image, binary_image, output_image]

for i in range(3):
    plt.subplot(1, 3, i+1)
    if i == 2:  # Display colored image for connected components
        plt.imshow(images[i])
    else:
        plt.imshow(images[i], cmap='gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])

plt.show()

"""Comparison with 4 and 8 connectedness"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the image
image_path = '/content/Screenshot 2024-09-07 204555.png'  # Replace with your image path
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if image is loaded
if image is None:
    print("Error: Image not found!")
    exit()

# Apply binary thresholding to create a binary image
_, binary_image = cv2.threshold(image, 128, 255, cv2.THRESH_BINARY)

# 4-connectivity
num_labels_4, labels_4 = cv2.connectedComponents(binary_image, connectivity=4)

# 8-connectivity
num_labels_8, labels_8 = cv2.connectedComponents(binary_image, connectivity=8)

# Generate random colors for visualization
colors_4 = np.random.randint(0, 255, size=(num_labels_4, 3), dtype=np.uint8)
colors_8 = np.random.randint(0, 255, size=(num_labels_8, 3), dtype=np.uint8)

# Create output images
output_image_4 = np.zeros((labels_4.shape[0], labels_4.shape[1], 3), dtype=np.uint8)
output_image_8 = np.zeros((labels_8.shape[0], labels_8.shape[1], 3), dtype=np.uint8)

for i in range(1, num_labels_4):  # Skip background label (0)
    output_image_4[labels_4 == i] = colors_4[i]

for i in range(1, num_labels_8):  # Skip background label (0)
    output_image_8[labels_8 == i] = colors_8[i]

# Display the results
titles = ['Original Image', 'Binary Image', '4-Connectivity', '8-Connectivity']
images = [image, binary_image, output_image_4, output_image_8]

for i in range(4):
    plt.subplot(1, 4, i+1)
    if i >= 2:  # Display colored output images for connectivity
        plt.imshow(images[i])
    else:
        plt.imshow(images[i], cmap='gray')
    plt.title(titles[i])
    plt.xticks([]), plt.yticks([])

plt.show()